---
title: "making_tripcatch_2022_sites"
format: html
editor: visual
---library(tidyverse)
library(here)
library(sf)
library(tmap)
---

This file takes NOAＡ tripcatch data and adds fishing site characteristics based on site id, water body variables, and advisory variables. First join site data to water body data,  then join site water body data to advisory data, then join site water body advisory data to trip_catch_2022:

```{r}
#packages
library(tidyverse)
library(here)
library(sf)
library(tmap)

#load data
data_path <- here('data') #relative path to the data folder
water_qual <- read.csv(here('data','WaterQualityLightAttenuationStation.csv'))
load(here('data','intermediate_datasets','trip_catch_2022.RData'))
load(here('data','intermediate_datasets','trip_catch_2022.RData'))
load(here('data',"intermediate_datasets","active_sites.Rdata"))
cb_sf <- st_read(here('data', 'watershed boundary', 'Chesapeake_Bay_Watershed_Boundary.shp')) #Chesapeake Bay shapefile
#md_bodies<-st_read(here('data',"Maryland_Waterbodies_-_Rivers_and_Streams_(Generalized)","HYDR_RiversStreamsGeneralized_USGS.shp"))
md_adv_bodies <- st_read(here('data',"Fish advisory shape files", "FCA_Data","Species.shp"))
md_shapefiles <- st_read(here('data',"Fish advisory shape files", "FCA_Data","FCA_Areas.shp"))
james_advisory_bodies <- st_read(here('data',"Fish advisory shape files","JamesPolylines.shp"))
chesapeake_advisory_bodies <- st_read(here('data',"Fish advisory shape files","ChesapeakePolylines.shp"))
vdh_advisory_bodies <- st_read(here('data',"Fish advisory shape files","VDHFishConsAdvisoryPolygon.shp"))
potomac_advisory_bodies <- st_read(here('data',"Fish advisory shape files","PotomacPolylines.shp"))
```

remove unnecessary variables and merge Maryland advisory shapefiles with advisory information
```{r}
cb_access_wb_sf <- cb_access_sf |> #dataset of fishing sites and their site characteristics
  mutate(site_id = paste(state_code,county_code,site_external_id,sep=""))|>
  select(site_id,state,x..of.ramps,headboat.only,private.access,is.fee.charged.to.the.public.for.use.of.site,retail.bait,shore.mode,tackle.shops)

md_shapefiles <- md_shapefiles |> #shapefiles of where certain advisories apply
  st_make_valid(shp)|>
  select(GIS_ID, Waterbody)

#join md_adv_bodies to corresponding shapefile (md_adv_bodies is the dataset of what advisories go with each water body)
md_adv_bodies <- md_shapefiles |>
  merge(md_adv_bodies |> st_drop_geometry(),by=c("GIS_ID","Waterbody"))


```

examine map of VA and MD water bodies (what do the advisory shapefiles look like?)

```{r}
tmap_leaflet(
  tm_shape(james_advisory_bodies) + tm_lines(col = "red", id="Specific_W")+
    tm_shape(vdh_james) + tm_polygons(col = "orange", id="Specific_W")+
  tm_shape(cb_access_wb_sf|>filter(substr(site_id,1,2)!="24")) + tm_symbols(size = 1,alpha=0.5,id="site_id"))


tmap_leaflet(
  tm_shape(md_shapefiles) + tm_polygons(col = "Waterbody", palette="viridis",id="Waterbody"))

vdh_advisory_bodies <- vdh_advisory_bodies |> st_make_valid(shp)
tmap_leaflet(
  tm_shape(vdh_advisory_bodies) + tm_polygons(col = "Specific_W", palette="viridis",id="Specific_W"))

#check sorting
tmap_leaflet(
  #tm_shape(waterbodies|>filter(name %in% cb_access_wb_sf$water_body)) + tm_lines(col = "name", palette="viridis",id="name")+
  tm_shape(cb_access_wb_sf) + tm_symbols(size = 0.1,alpha=0.7,id="water_body",col="water_body",palette="viridis"))
```

make combined virginia waterbody shapefiles dataset

```{r}
#tweaking advisory_bodies datasets so that they can all append to each other in one dataset
chesapeake_advisory_bodies <- chesapeake_advisory_bodies|>mutate(Adv23 = NA,polygon=FALSE)|>select(-Specific_W,-AGUID,-Affected_L,-Basin,-Shape_Leng)
vdh_advisory_bodies<-vdh_advisory_bodies|>select(-VDH_Waterb,-WBID,-BID,-OBJECTID_1,-Advisory,-AffectedLo,-MajorBasin,-AdvisoryAr,-AdvisoryTy,-Species,-Advisory_T,-Shape_Area,-Specific_W,-AGUID,-Affected_L,-Basin,-Shape_Leng)|>mutate(polygon=TRUE)
potomac_advisory_bodies <- potomac_advisory_bodies|>mutate(Adv23 = NA,polygon=FALSE)|>select(-Specific_W,-AGUID,-Affected_L,-Basin,-Shape_Leng)
james_advisory_bodies <- james_advisory_bodies |>mutate(polygon=FALSE)|>select(-Specific_W,-AGUID,-Affected_L,-Basin,-Shape_Leng)

#combine them
va_waterbodies <- rbind(chesapeake_advisory_bodies,vdh_advisory_bodies,potomac_advisory_bodies,james_advisory_bodies)

#fix geometry
va_waterbodies <- va_waterbodies |> st_make_valid(shp)
#changte crs so that VA matches MD
md_adv_bodies <- md_adv_bodies|>
  st_transform(st_crs(cb_access_sf)) |>
  mutate(index=GIS_ID+nrow(va_waterbodies))
va_waterbodies <- va_waterbodies|>
  st_transform(st_crs(cb_access_sf)) 

va_waterbodies$index <- 1:nrow(va_waterbodies) #add index to join va advisories to later
#make va and md together in waterbodies, which also contains index

waterbodies <- va_waterbodies |>
  mutate(Waterbody=Waterbody_)|>
  select(Waterbody,polygon,geometry,index) |>
  rbind(md_adv_bodies|>
          mutate(polygon=TRUE)|>
          select(Waterbody,polygon,geometry,index))


```

add a variable that is the closest river to each site in cb_access_df (dataset of sites and their characteristics)

```{r}

#add water_body to cb_access_wb_sf
cb_access_wb_sf <- cb_access_wb_sf |>
  mutate(water_body = waterbodies$Waterbody[st_nearest_feature(cb_access_wb_sf, waterbodies)],#name of the nearest water body
    body_id=waterbodies$index[st_nearest_feature(cb_access_wb_sf, waterbodies)], #this will join to index in va_waterbodies later
    polygon = waterbodies$polygon[st_nearest_feature(cb_access_wb_sf, waterbodies)]) #is the nearest feature a polygon or a line?

```

check work w mapping

```{r}
#non-vdh bodies
tmap_leaflet(
  tm_shape(waterbodies|> #lines of water bodies that are in the site dataset
             filter(index %in% cb_access_wb_sf$body_id &
                      polygon == FALSE)) + 
    tm_lines(col = "Waterbody", palette = "viridis",id="Waterbody")+
    tm_shape(waterbodies|> #polygons of water bodies in the site dataset
             filter(index %in% cb_access_wb_sf$body_id &
                      polygon == TRUE)) + 
    tm_polygons(col = "Waterbody", palette = "viridis",id="Waterbody")+
  tm_shape(cb_access_wb_sf|>filter(polygon==FALSE)) + tm_symbols(size = 0.5,alpha=0.5,
                                         col="water_body",palette = "viridis",id="water_body")+
    tm_shape(cb_access_wb_sf|>filter(polygon==TRUE)) + tm_symbols(size = 0.5,alpha=0.5,
                                         col="water_body",palette = "viridis",id="water_body"))

```

join site data to advisory data for dataset that has sites, their characteristics, and the advisory waterbody the site is located within

```{r}
#virginia
site_advisory <- cb_access_wb_sf |> 
  st_drop_geometry()|>
  left_join(va_waterbodies,by=c("body_id"="index"))|>
  mutate(polygon = polygon.x)|>
  select(-polygon.x,-polygon.y)

#add variable that is virginia's number of advisories per site, specifically number of advisories where it's 2 meals per month or less, which is all of virginia advisories
site_advisory <- site_advisory |>
  mutate(num_advisories = 
           case_when(
    is.na(Adv1) ~ 0,
    is.na(Adv2) ~ 1,
    is.na(Adv3) ~ 2,
    is.na(Adv4) ~ 3,
    is.na(Adv5) ~ 4,
    is.na(Adv6) ~ 5,
    is.na(Adv7) ~ 6,
    is.na(Adv8) ~ 7,
    is.na(Adv9) ~ 8,
    is.na(Adv10) ~ 9,
    is.na(Adv11) ~ 10,
    is.na(Adv12) ~ 11,
    is.na(Adv13) ~ 12,
    is.na(Adv14) ~ 13,
    is.na(Adv15) ~ 14,
    is.na(Adv16) ~ 15,
    is.na(Adv17) ~ 16,
    is.na(Adv18) ~ 17,
    is.na(Adv19) ~ 18,
    is.na(Adv20) ~ 19,
    is.na(Adv21) ~ 20,
    is.na(Adv22) ~ 21,
    is.na(Adv23) ~ 22,
    TRUE~23
  ))

#inspect <- site_advisory |> filter(state=="VA")|>select(site_id,body_id,starts_with("Adv"),num_advisories)
```

join tripcatch (NOAA　fishing trip data) to site advisory data

```{r}
tripcatch_site_2022<-trip_catch_2022|> inner_join(site_advisory,by=c("site_id"="site_id"))#inner join to remove observations with sites that were not in chesapeake bay

```

try to mutate meals variable

```{r}
#va meals
#long process of wrangling the number of meals safe to eat of a given fish at a given site
#if common (eg fish species name) in adv_1, return adv_1 string after second comma
tripcatch_site_2022<-tripcatch_site_2022|> 
  mutate(va_adv = case_when(
    str_detect(toupper(Adv1),toupper(common)) ~ str_split_i(Adv1, pattern = ",",i=3), #if species is in Adv1, return Adv1 after second comma
    str_detect(toupper(Adv2), toupper(common)) ~ str_split_i(Adv2, pattern = ",",i=3),
    str_detect(toupper(Adv3), toupper(common)) ~ str_split_i(Adv3, pattern = ",",i=3),
    str_detect(toupper(Adv4), toupper(common)) ~ str_split_i(Adv4, pattern = ",",i=3),
    str_detect(toupper(Adv5), toupper(common)) ~ str_split_i(Adv5, pattern = ",",i=3),
    str_detect(toupper(Adv6), toupper(common)) ~ str_split_i(Adv6, pattern = ",",i=3),
    str_detect(toupper(Adv7), toupper(common)) ~ str_split_i(Adv7, pattern = ",",i=3),
    str_detect(toupper(Adv8), toupper(common)) ~ str_split_i(Adv8, pattern = ",",i=3),
    str_detect(toupper(Adv9), toupper(common)) ~ str_split_i(Adv9, pattern = ",",i=3),
    str_detect(toupper(Adv10), toupper(common)) ~ str_split_i(Adv10, pattern = ",",i=3),    
    str_detect(toupper(Adv11), toupper(common)) ~ str_split_i(Adv11, pattern = ",",i=3),
    str_detect(toupper(Adv12), toupper(common)) ~ str_split_i(Adv12, pattern = ",",i=3),
    str_detect(toupper(Adv13), toupper(common)) ~ str_split_i(Adv13, pattern = ",",i=3),
    str_detect(toupper(Adv14), toupper(common)) ~ str_split_i(Adv14, pattern = ",",i=3),
    str_detect(toupper(Adv15), toupper(common)) ~ str_split_i(Adv15, pattern = ",",i=3),
    str_detect(toupper(Adv16), toupper(common)) ~ str_split_i(Adv16, pattern = ",",i=3),
    str_detect(toupper(Adv17), toupper(common)) ~ str_split_i(Adv17, pattern = ",",i=3),
    str_detect(toupper(Adv18), toupper(common)) ~ str_split_i(Adv18, pattern = ",",i=3),
    str_detect(toupper(Adv19), toupper(common)) ~ str_split_i(Adv19, pattern = ",",i=3),
    str_detect(toupper(Adv20), toupper(common)) ~ str_split_i(Adv20, pattern = ",",i=3),
    str_detect(toupper(Adv21), toupper(common)) ~ str_split_i(Adv21, pattern = ",",i=3)))

#convert the advisory string to a number.
tripcatch_site_2022<-tripcatch_site_2022|>
  mutate(va_adv_meals = case_when(
    va_adv == " DO NOT EAT" ~ 0,
    va_adv == " No more than two meals/month" ~ 2,
    va_adv == " No more two meals/month" ~ 2))

checkwork <- tripcatch_site_2022 |>
  select(va_adv,va_adv_meals)|>
  unique()
    
#note that common is only ever NA if there were no fish caught
#fish that have no advisory
inspect<-tripcatch_site_2022|>
  filter(!is.na(common))|>
  select(common, starts_with("Adv"),va_adv)|>filter(is.na(va_adv))|>unique()

```

add variable md_adv based on site species length. MD has different advisories based on length as well as fishing site and species

```{r}
#maryland 
#add num_advisories to md_adv_bodies and change species to uppercase
md_adv_bodies <- md_adv_bodies |>
  mutate(Species = toupper(Species))

#filter to just advisories that are 2 meals per month or more serious, then group by index (eg waterbody) to get dataset of waterbody index + number of advisories per waterbody
advisory_df <- md_adv_bodies |>
  filter(General_Po %in% list("2 Meals per Month","1 Meal per Month","Eat Sparingly","Avoid","1 Meal/Every other Month"))|>
  group_by(index)|>
    summarize(num_advisories = n())|>
  st_drop_geometry()

md_adv_bodies<-md_adv_bodies|>
  st_drop_geometry()|>
  left_join(advisory_df,by=c("index"="index")) #now this dataset has the number of advisories per waterbody
  

tripcatch_site_2022 <- tripcatch_site_2022 |> #6561 obs
  left_join(md_adv_bodies,by=c("body_id"="index","common"="Species"))
#make one num_advisories var
tripcatch_site_2022 <- tripcatch_site_2022 |> #6561 obs
  mutate(num_advisories = case_when(
    is.na(num_advisories.x) ~ num_advisories.y,
    is.na(num_advisories.y) ~ num_advisories.x
  ))|>
  select(-num_advisories.x,-num_advisories.y)
#rename some species
md_adv_bodies$Species=ifelse(md_adv_bodies$Species=="Sunfish (including Bluegill)","SUNFISH",md_adv_bodies$Species)
md_adv_bodies$Species=ifelse(md_adv_bodies$Species=="Flathead Catfish - All Sizes","FLATHEAD CATFISH",md_adv_bodies$Species)

#spot fixes: species that have lengths
tripcatch_site_2022 <- tripcatch_site_2022 |>
  mutate(General_Po=case_when(
    common=="BLUE CATFISH" & body_id ==1089 ~ "Avoid",
    common=="BLUE CATFISH" & body_id %in% list(1136,1141,1105,1172) & between(tot_len,381,609.6)  ~  "No Limit",
    common=="BLUE CATFISH" & body_id ==1132 & between(tot_len,381,609.6)  ~ "4 Meals per Month",#15-24
    common=="BLUE CATFISH" & body_id ==1105 & between(tot_len,381,609.6)  ~ "1 Meal per Month",
    common=="BLUE CATFISH" & body_id ==1145 & between(tot_len,304.8,381)  ~ "4 Meals per Month",#12-15
    common=="BLUE CATFISH" & body_id ==1145 & tot_len>762 ~ "Avoid",#>30
    common=="BLUE CATFISH" & body_id ==1145 & between(tot_len,609.6,762) ~ "1 Meal per Month",#24-30
    common=="BLUE CATFISH" & body_id ==1145 & between(tot_len,381,609.6) ~ "4 Meals per Month",
    common=="BLUE CATFISH" & body_id ==1150 & between(tot_len,304.8,381) ~ "4 Meals per Month",
    common=="BLUE CATFISH" & body_id ==1150 & between(tot_len,381,609.6) ~ "2 Meals per Month",
    common=="BLUE CATFISH" & body_id ==1150 & between(tot_len,609.6,762) ~ "1 Meal per Month",
    common=="BLUE CATFISH" & body_id ==1150 & tot_len>762 ~ "Avoid",
    common ==  "CHANNEL CATFISH" & body_id ==1104 & tot_len > 508 ~ "1 Meal/Every other Month
", #20in
    common ==  "CHANNEL CATFISH" & body_id ==1104 & tot_len < 508 ~ "6 Meals per Month",
    common ==  "CHANNEL CATFISH" & body_id ==1145 & tot_len < 457.2 ~ "1 Meal/Every other Month
", #18in
    common ==  "CHANNEL CATFISH" & body_id ==1145 & tot_len > 457.2 ~ "Avoid",
    common ==  "FLATHEAD CATFISH" & body_id ==1166 & tot_len < 558.8 ~ "No Limit",
    common ==  "FLATHEAD CATFISH" & body_id ==1166 & tot_len > 558.8 ~ "7 Meals per Month",
    common ==  "BLUEFISH" & body_id ==1091 & tot_len < 381 ~ "2 Meals per Month",
    common ==  "BLUEFISH" & body_id ==1091 & tot_len > 381 ~ "Avoid",
    common ==  "STRIPED BASS" & body_id ==1103 & tot_len < 736.6 ~ "3 Meals per Month",
    common ==  "STRIPED BASS" & body_id ==1103 & tot_len > 736.6 ~ "1 Meal per Month",
    common ==  "STRIPED BASS" & body_id ==1091  ~ "1 Meal per Month",
    common ==  "STRIPED BASS" & body_id ==1138 & tot_len < 736.6 ~ "2 Meals per Month",
    common ==  "STRIPED BASS" & body_id ==1138 & tot_len > 736.6 ~ "1 Meal per Month",
    TRUE ~ General_Po
  ))
#no pairings available
inspect<-tripcatch_site_2022 |>
  filter(is.na(General_Po) & is.na(common)==FALSE & state=="MD")|>
  select(site_id,body_id,common,General_Po)|>
  unique()
#now make inspect df that's all the na's for body-species combos
```

Add variable that is number of meals safe to eat per fish of given species at given site according to Maryland

```{r}
tripcatch_site_2022 <- tripcatch_site_2022 |>
  mutate(md_adv = case_when(
    General_Po=="1 Meal/Every other Month" ~ 0.5,
    General_Po=="1 Meal/Every other Month\n" ~ 0.5,
    General_Po=="Avoid" ~ 0,
    General_Po=="No Limit" ~ 10, 
    is.na(General_Po) ~ 10,
    General_Po=="Eat Sparingly" ~ 0.25,
    General_Po=="No Limit\r\nNo Limit\r\nNo Limit" ~10,
    TRUE ~ as.numeric(str_sub(General_Po, start = 1, end = 1)
  )))

inspect <- tripcatch_site_2022 |> 
  select(General_Po,md_adv
  ) |>unique()
```

```{r}
#add the number of meals safe to eat across both states' advisories. if both states have waterbodies that the site is in, pick the smaller number of meals
tripcatch_site_2022 <- tripcatch_site_2022 |>
  mutate(advisory_meals = case_when(
    !is.na(md_adv) & !is.na(va_adv_meals) ~ pmin(md_adv,va_adv_meals), #pick the smaller number of meals if there are two
    !is.na(md_adv) & is.na(va_adv_meals) ~ md_adv,
    !is.na(va_adv_meals) & is.na(md_adv) ~ va_adv_meals,
    is.na(va_adv_meals) & is.na(va_adv_meals) & state == "VA" ~ 10, #assumes if site in virginia, no advisory means safe to eat. same assumption for MD, which was encoded earlier
    is.na(md_adv) & is.na(va_adv_meals) & state == "MD" ~ 10 #if site in md and advisory is na, then it's na
  ),
  dne_eaten = case_when( #variable that is whether a fish with an advisory was eaten or not
    advisory_meals %in% list(0,1,2)  & landing != 0 ~ 1, #because there are only 23 observations such that dne happens
    TRUE ~ 0 # if no advisory data on it, assume safe to eat
  )) 

#check work for dne_eaten and advisory_meals
inspect <- tripcatch_site_2022|>
  select(state,md_adv,va_adv_meals,advisory_meals,landing,dne_eaten)|>
  unique()

#check work for polluted meals and total meals
inspect <- tripcatch_site_2022|>
  select(wgt_ab1,landing,advisory_meals,polluted_meals,total_meals)|>
  unique()

```

get rid of useless variables

```{r}
#tripcatch_site_2022 <- tripcatch_site_2022|>
  #select(-strat_id,-psu_id,-AREA,-INTSITE,-TELEFON,-REEFCODE,-REEF,-geometry.x,-geometry.y)|> #by no means exhaustive list of useless variables
  #st_drop_geometry()
```

save dataset

```{r}
save(tripcatch_site_2022,file=here(data_path,"intermediate_datasets","tripcatch_site_2022.RData"))
```
